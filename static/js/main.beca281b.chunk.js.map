{"version":3,"sources":["pages/Login/Login.js","pages/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","useState","email","setEmail","password","setPassword","emailError","setemailError","passwordError","setpasswordError","loginError","setLoginError","redirect","setRedirect","useEffect","localStorage","getItem","to","className","type","value","onChange","e","target","placeholder","onClick","length","match","setItem","style","fontSize","Dashboard","token","url1","setUrl1","url2","setUrl2","clear","width","src","height","title","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.beca281b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"./Login.css\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default function Login() {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [emailError, setemailError] = useState(false);\r\n    const [passwordError, setpasswordError] = useState(false);\r\n    const [loginError, setLoginError] = useState(false);\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const handleLogin = () => {\r\n        if (email.length > 0 && password.length > 0) {\r\n            if (email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\r\n                if (email === \"test@test.com\" && password === \"test123\") {\r\n                    setLoginError(false)\r\n                    setRedirect(true)\r\n                    localStorage.setItem(\"email\", email);\r\n                    localStorage.setItem(\"token\", \"adsjkfhdf6ADFfsadfaASDF344FG$#dgdfg\")\r\n                }\r\n                else {\r\n                    setLoginError(true)\r\n                }\r\n            }\r\n            else {\r\n                setemailError(true)\r\n            }\r\n        }\r\n        else {\r\n            if (email.length === 0 || !email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/)) {\r\n                setemailError(true);\r\n            }\r\n            if (password.length === 0) {\r\n                setpasswordError(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(localStorage.getItem(\"token\")){\r\n            setRedirect(true)\r\n        }\r\n    })\r\n\r\n    if (redirect) {\r\n        return <Redirect to='/dashboard' />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"loginFormContainer\">\r\n            <div className=\"loginForm\">\r\n                <div className=\"loginHeader\">\r\n                    Login\r\n                </div>\r\n                <div className=\"loginInput\">\r\n                    <input type=\"email\"\r\n                        value={email}\r\n                        onChange={(e) => {\r\n                            setEmail(e.target.value)\r\n                            setemailError(false)\r\n                            setLoginError(false)\r\n                        }}\r\n                        placeholder=\"Enter your email\"\r\n                    />\r\n                    {\r\n                        emailError ?\r\n                            <div className=\"errorMessage\">* Please provide a valid email address.</div>\r\n                            : null\r\n                    }\r\n                </div>\r\n                <div className=\"loginInput\">\r\n                    <input type=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => {\r\n                            setPassword(e.target.value)\r\n                            setpasswordError(false)\r\n                            setLoginError(false)\r\n                        }}\r\n                        placeholder=\"Enter your password\"\r\n                    />\r\n                    {\r\n                        passwordError ? <div className=\"errorMessage\">* Password is required.</div> : null\r\n                    }\r\n                </div>\r\n                <button className=\"loginButton\"\r\n                    onClick={handleLogin}\r\n                >\r\n                    Login\r\n                </button>\r\n                {\r\n                    loginError ? <div className=\"errorMessage\" style={{ fontSize: '13px' }}>Wrong email or password.</div> : null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./Dashboard.css\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default function Dashboard() {\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    const [url1, setUrl1] = useState(\"\");\r\n    const [url2, setUrl2] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n\r\n        }\r\n        else {\r\n            setRedirect(true)\r\n        }\r\n    }, [redirect])\r\n\r\n    if (redirect) {\r\n        localStorage.clear()\r\n        return <Redirect to='/' />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboardContainer\">\r\n            <div className=\"header\">\r\n                <div className=\"eachHeaderElement\">{localStorage.getItem(\"email\")}</div>\r\n                <div className=\"eachHeaderElement\">\r\n                    <input type=\"text\"\r\n                        style={{ width: '25vw' }}\r\n                        value={url1}\r\n                        onChange={(e) => setUrl1(e.target.value)}\r\n                        placeholder=\"Enter url 1 here\"\r\n                    />\r\n                </div>\r\n                <div className=\"eachHeaderElement\">\r\n                    <input type=\"text\"\r\n                        style={{ width: '25vw' }}\r\n                        value={url2}\r\n                        onChange={(e) => setUrl2(e.target.value)}\r\n                        placeholder=\"Enter url 2 here\"\r\n                    />\r\n                </div>\r\n                <div className=\"eachHeaderElement\">\r\n                    <button className=\"logoutButton\"\r\n                        onClick={() => setRedirect(true)}\r\n                    >\r\n                        Log out\r\n                </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"viewAreaConatiner\">\r\n                <div className=\"viewArea\">\r\n                    {\r\n                        url1.length > 0 ?\r\n                            <iframe src={url1} style={{\r\n                                height: \"100%\",\r\n                                width: \"100%\"\r\n                            }}\r\n                                title=\"url2Viewer\"\r\n                            >\r\n                                <p>Your browser does not support iframes.</p>\r\n                            </iframe>\r\n                            : <p className=\"urlInputtext\">Fill Url 1 in above input field to view the web page here.</p>\r\n                    }\r\n                </div>\r\n                <div className=\"viewArea\">\r\n                    {\r\n                        url2.length > 0 ?\r\n                            <iframe src={url2} style={{\r\n                                height: \"100%\",\r\n                                width: \"100%\"\r\n                            }}\r\n                                title=\"url2Viewer\"\r\n                            >\r\n                                <p>Your browser does not support iframes.</p>\r\n                            </iframe>\r\n                            : <p className=\"urlInputtext\">Fill Url 2 in above input field to view the web page here.</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Login from './pages/Login/Login';\nimport Dashboard from './pages/Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}